#! /usr/bin/env python3
# Generates a readable representation of the current version number; with
# --short a short one. Or alternatively with --header, a version.h file with
# various constants defined accordingly.

import argparse
import filecmp
import os
import re
import shutil
import subprocess
import tempfile


def get_version(ref):
    git_tree = subprocess.call(
        ["git", "rev-parse", "--git-dir"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )
    if git_tree == 0:
        hash = subprocess.check_output(
            ["git", "rev-parse", "--short", ref], universal_newlines=True
        ).strip()

        branch = hash
        try:
            branch = subprocess.check_output(
                ["git", "symbolic-ref", "--short", ref],
                universal_newlines=True,
                stderr=subprocess.DEVNULL,
            ).strip()
        except subprocess.CalledProcessError:
            pass

        describe_arg = ref if ref != "HEAD" else "--dirty"
        raw_git_version = subprocess.check_output(
            ["git", "describe", "--always", "--tags",
                "--match", "v*", describe_arg],
            universal_newlines=True,
        )
        # Strip the 'v' from the version tag,
        # drop the suffix that includes commit hash if present.
        # e.g. v1.1.0-dev-61-g02be372e -> v1.1.0-dev
        git_version = re.sub(
            r"-([0-9]*)-g[0-9a-z]*", r".\1", re.sub(r"^v", "", raw_git_version)
        ).strip()
        return hash, branch, git_version
    elif os.path.exists("VERSION"):
        with open("VERSION", "r") as info:
            hash = info.readline().split("=")[1].strip()
            branch = info.readline().split("=")[1].strip()
            git_version = info.readline().split("=")[1].strip()
            return hash, branch, git_version
    else:
        print(
            "Cannot extract version information: neither git repository nor VERSION file present"
        )
        exit(1)


def write_if_changed(target, txt):
    """Writes `txt` to `target` but skips the write if `target` would be unchanged"""
    with tempfile.NamedTemporaryFile(mode="w") as store:
        store.write(txt)
        store.flush()
        if not os.path.exists(target) or not filecmp.cmp(store.name, target, shallow=False):
            shutil.copy(store.name, target)


parser = argparse.ArgumentParser(
    description="Generates a readable representation of the current version number"
)
output_mode_args = parser.add_mutually_exclusive_group()
output_mode_args.add_argument(
    "--short", action="store_true", help="output a short version string"
)
output_mode_args.add_argument(
    "--cmake", action="store_true", help="output version string for use with CMake"
)
parser.add_argument(
    "--header",
    metavar="file",
    nargs="?",
    const="version.h",
    help="generate a version.h file for compilation",
)
parser.add_argument(
    "--store",
    metavar="file",
    nargs="?",
    const="VERSION",
    help="generate VERSION file persisting Git information",
)
parser.add_argument(
    "--git-root",
    metavar="directory",
    nargs=1,
    help="path to directory containing .git folder",
)
parser.add_argument(
    "--commit",
    metavar="COMMIT_HASH",
    default="HEAD",
    help="commit to generate version information for",
)
options = parser.parse_args()

# Move to the repository root.
os.chdir(
    options.git_root[0]
    if options.git_root
    else os.path.join(os.path.dirname(__file__), "..")
)
chash, branch, git_version = get_version(options.commit)

# When running from CI, for geting the branch name we prefer what
# might be passed in through environment variables as we may not
# actually be on a branch.
ci_branch = os.getenv(
    "CI_COMMIT_REF_NAME", os.getenv("CIRRUS_BRANCH")
)  # GitLab, Cirrus CI
if ci_branch:
    branch = ci_branch

# On release tags, git describe doesn't emit the usual suffix,
# therefore the commit field remains empty.
# To avoid unpacking failures, we set commit to nothing.
version, commit, * \
    _ = git_version.split('-') if '-' in git_version else (git_version, "")
dirty = "dirty" if "dirty" in git_version else ""
if commit and dirty:
    commit = commit + "." + dirty

prerelease = ""
if branch in ["main", "master"]:
    prerelease = commit
elif re.match("release.*", branch) or not branch:
    prerelease = commit
else:
    prerelease = "branch"
    chash = ""

on_release_tag = subprocess.call(
    ["git", "describe", "--tags", "--match", "v*", "--exact-match"],
    stdout=subprocess.DEVNULL,
    stderr=subprocess.DEVNULL,
)
if on_release_tag == 0:
    prerelease = ""

str_prerelease = "-" + prerelease if prerelease else ""
str_branch = branch + " " if branch and chash else branch

major, minor, patch, *_ = version.split(".")
# This must match the computation the Spicy validator does for "%spicy-version".
version_number = int(major) * 10000 + int(minor) * 100 + int(patch)

if options.short:
    print(version + str_prerelease)
elif options.cmake:
    print(version)
else:  # long
    print("{version}{str_prerelease} ({str_branch}{chash})".format(
        version=version,
        str_prerelease=str_prerelease,
        str_branch=str_branch,
        chash=chash))

if options.header:
    header_contents = """\
/* Autogenerated. Do not edit.
VERSION {version}{str_prerelease}
*/
# define PROJECT_VERSION_NUMBER       {version_number}
# define PROJECT_VERSION_MAJOR        {major}
# define PROJECT_VERSION_MINOR        {minor}
# define PROJECT_VERSION_PATCH        {patch}
# define PROJECT_VERSION_PRERELEASE   "{prerelease}"
# define PROJECT_VERSION_STRING_SHORT "{version}{str_prerelease}"
# define PROJECT_VERSION_STRING_LONG  "{version}{str_prerelease} ({str_branch}{chash})"
""".format(
        version=version,
        version_number=version_number,
        major=major,
        minor=minor,
        patch=patch,
        prerelease=prerelease,
        str_prerelease=str_prerelease,
        str_branch=str_branch,
        chash=chash)
    write_if_changed(options.header, header_contents)

if options.store:
    with tempfile.NamedTemporaryFile(mode="w") as store:
        store.write("""\
                branch={branch}
                hash={chash}
                git_version={git_version}
                """.format(
                    branch=branch,
                    chash=chash,
                    git_version=git_version))
        store.flush()
        shutil.copy(store.name, options.store)
