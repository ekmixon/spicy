### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/compiler] parsing file "<...>/basic-module.hlt"
[debug/compiler] registering AST for module Foo ("<...>//basic-module.hlt")
[debug/compiler]   Plugin HILTI
[debug/compiler]     processing AST, round 1
[debug/compiler]       performing missing imports for module Foo
[debug/compiler]         updated cached AST for module Foo (final: no, requires_compilation: yes, dependencies: (none))
[debug/compiler]       modules: Foo
[debug/compiler]       resetting nodes for module Foo
[debug/compiler]       building scopes for all modules
[debug/compiler]       resolving IDs in module Foo
[debug/compiler]         -> modified
[debug/compiler]       resolving operators in module Foo
[debug/compiler]       coercing expressions for Foo
[debug/compiler]     processing AST, round 2
[debug/compiler]       modules: Foo
[debug/compiler]       resetting nodes for module Foo
[debug/compiler]       building scopes for all modules
[debug/compiler]       resolving IDs in module Foo
[debug/compiler]       resolving operators in module Foo
[debug/compiler]       coercing expressions for Foo
[debug/ast-final] # Foo: Final AST
[debug/ast-final]   - Module %1 (basic-module.hlt:5:1-11:2)
[debug/ast-final]       | Foo -> declaration::Module %6 <id="Foo">
[debug/ast-final]       | X -> declaration::Type %4 <linkage="private">
[debug/ast-final]       | foo -> declaration::Function %5 <linkage="private">
[debug/ast-final]     - ID <name="Foo"> (basic-module.hlt:5:8)
[debug/ast-final]     - statement::Block (basic-module.hlt:5:1-11:2)
[debug/ast-final]     - declaration::Type %4 <linkage="private"> (basic-module.hlt:5:13-7:15)
[debug/ast-final]       - ID <name="X"> (basic-module.hlt:7:6)
[debug/ast-final]       - type::Bool (basic-module.hlt:7:10) (non-const) (type-id: Foo::X)
[debug/ast-final]       - node::None (basic-module.hlt:5:13-7:15)
[debug/ast-final]     - declaration::Function %5 <linkage="private"> (basic-module.hlt:9:1)
[debug/ast-final]       - Function <cc="<standard>"> (basic-module.hlt:9:8)
[debug/ast-final]           | bar -> declaration::Parameter %2 <is_struct_param="false" kind="in">
[debug/ast-final]         - ID <name="foo"> (basic-module.hlt:9:16)
[debug/ast-final]         - type::Function <flavor="standard"> (basic-module.hlt:9:8) (non-const)
[debug/ast-final]           - type::function::Result (basic-module.hlt:9:9)
[debug/ast-final]             - type::String (basic-module.hlt:9:9) (non-const)
[debug/ast-final]           - declaration::Parameter %2 <is_struct_param="false" kind="in"> (basic-module.hlt:9:20)
[debug/ast-final]             - ID <name="bar"> (basic-module.hlt:9:25)
[debug/ast-final]             - type::Real (basic-module.hlt:9:20) (non-const)
[debug/ast-final]             - node::None (basic-module.hlt:9:20)
[debug/ast-final]         - node::None (basic-module.hlt:9:8)
[debug/ast-final]         - node::None (basic-module.hlt:5:13-7:15)
[debug/compiler]     validating module Foo
[debug/compiler]   updated cached AST for module Foo (final: yes, requires_compilation: yes, dependencies: (none))
[debug/compiler]   compiling module Foo to C++
[debug/compiler]     finalizing module Foo
// Begin of Foo (from "<...>/basic-module.hlt")
// Compiled by HILTI version X.X.X

#include <hilti/rt/compiler-setup.h>

#include <hilti/rt/libhilti.h>

namespace __hlt::Foo {
    extern void __register_module();
}

HILTI_PRE_INIT(__hlt::Foo::__register_module)

extern void __hlt::Foo::__register_module() { hilti::rt::detail::registerModule({ "Foo", nullptr, nullptr, nullptr}); }

/* __HILTI_LINKER_V1__
{"module":"Foo","namespace":"__hlt::Foo","path":"<...>/basic-module.hlt","version":1}
*/

